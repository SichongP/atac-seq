# Main entrypoint of the workflow. 
# Please follow the best practices: 
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there. 
ruleorder: common_peaks > txt2bed
import os

pepfile: "config/pep/config.yaml"
configfile: "config/config.yaml"
OUTDIR = pep.config['output_dir']

include: "rules/read_qc.smk"
include: "rules/library_qc.smk"
include: "rules/alignment.smk"
include: "rules/call_peaks.smk"
include: "rules/annotate_peaks.smk"
include: "rules/peak_filter.smk"


rule all:
    input:
        f"{OUTDIR}/qc/fastqc/raw/multiqc_report.html",
        f"{OUTDIR}/qc/trimmed/multiqc_report.html",
        expand(f"{OUTDIR}/tss_enricment/{{sample}}.TssEnrichment", sample = pep.sample_table['sample_name']),
        expand(f"{OUTDIR}/mapped/stats/{{sample}}.nucl.mit.ratio", sample = pep.sample_table['sample_name']),
        expand(f"{OUTDIR}/mapped/stats/{{sample}}.flagstats.txt", sample = pep.sample_table['sample_name']),
        expand(f"{OUTDIR}/metrics/frag_size/{{sample}}.tsv", sample = pep.sample_table['sample_name']),
        expand(f"{OUTDIR}/count_matrix/{{caller}}_norm.csv", caller = ['macs3', 'genrich']),
        expand(f"{OUTDIR}/peaks/genrich/combined_call/{{tissue_sex}}/{{tissue_sex}}_peaks.narrowPeak", tissue_sex = [ '_'.join(i) for i in pep.sample_table[['condition', 'sex']].values.tolist()]),
        expand(f"{OUTDIR}/peaks/{{caller}}/condition_specific/{{condition}}.unique_501bp_peaks.bed", caller =['macs3', 'genrich'], condition = pep.sample_table['condition'].unique()),
        expand(f"{OUTDIR}/annotation/{{caller}}/{{name}}.bed", name = list(pep.sample_table['condition'].unique()) + ['union', 'common'], caller =['macs3', 'genrich']),
        expand(f"{OUTDIR}/annotation/{{caller}}/{{name}}.specific.bed", name = list(pep.sample_table['condition'].unique()), caller =['macs3', 'genrich']),
        expand(f"{OUTDIR}/peaks/{{caller}}/condition_only/{{condition}}.unique_501bp_peaks.bed", caller =['macs3', 'genrich'], condition = pep.sample_table['condition'].unique()),
        expand(f"{OUTDIR}/peak_filter/{{caller}}/{{sample}}.csv", caller = ['macs3', 'genrich'], sample = [condition for condition in pep.sample_table['condition'].unique() if not condition == 'Testis'])
        
